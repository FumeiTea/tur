
## public function ##

declare -A __PERMISSIONS_MAP=(
  [--overplay - permission]='_permissionctl $2 SYSTEM_ALERT_WINDOW $package_name $user "allow|deny|ignore|default" $3 android.settings.action.MANAGE_OVERLAY_PERMISSION'
  [-floating - window]='_permissionctl $2 SYSTEM_ALERT_WINDOW $package_name $user "allow|deny|ignore|default" $3 android.settings.action.MANAGE_OVERLAY_PERMISSION'
  [fw]='_permissionctl $2 SYSTEM_ALERT_WINDOW $package_name $user "allow|deny|ignore|default" $3 android.settings.action.MANAGE_OVERLAY_PERMISSION'
)

#?battery_whitelist:zh
#
# package_name +/-
# $ dumpsys deviceidle whitelist  ->
# system-excidle,com.miui.core,10188
# system,com.miui.core,10188
# user,com.miui.analytics,10140
# > system-excidle/system/user package_name idle_time_limit
# > 系统自动添加/系统添加/用户手动添加  包名  允许在设备处于空闲状态时运行的时长
#
#?battery_whitelist:zh
battery_whitelist() {
  case $1 in
  help)
    echo battery_whitelist help
    ;;
  list)
    rish -c "dumpsys deviceidle whitelist"
    ;;
  get)
    rish -c "dumpsys deviceidle whitelist" | grep "$2"
    ;;
  '+')
    rish -c "dumpsys deviceidle whitelist +$2"
    ;;

  '-')
    rish -c "dumpsys deviceidle whitelist -$2"
    ;;
  esac
}
_manageDoze() {

  dumpsys deviceidle step

  dumpsys deviceidle step light
  dumpsys deviceidle step deep
  dumpsys deviceidle force-idle light
  dumpsys deviceidle force-idle deep
  dumpsys deviceidle force-inactive
  dumpsys deviceidle unforce
  dumpsys deviceidle get light
  dumpsys deviceidle get deep
  dumpsys deviceidle enabled light
  dumpsys deviceidle enabled deep
  dumpsys deviceidle whitelist
  dumpsys deviceidle whitelist +com.example.app
  dumpsys deviceidle whitelist -com.example.app
  dumpsys deviceidle except-idle-whitelist +com.example.app
  dumpsys deviceidle except-idle-whitelist =com.example.app
  dumpsys deviceidle except-idle-whitelist reset
  dumpsys deviceidle tempwhitelist
  dumpsys deviceidle tempwhitelist -d 10000 com.example.app
  dumpsys deviceidle tempwhitelist -r com.example.app
  dumpsys deviceidle motion
  dumpsys deviceidle force-modemanager-quickdoze true
  dumpsys deviceidle force-modemanager-quickdoze false
  dumpsys deviceidle force-modemanager-offbody true
  dumpsys deviceidle force-modemanager-offbody false
  dumpsys deviceidle disable light
  dumpsys deviceidle disable all
  dumpsys deviceidle enable light
  dumpsys deviceidle enable all

  get [light | deep | force | screen | charging | network | offbody | forceoffbody]

  light step light
  deep step deep
  light -f | light-f force-idle light
  deep -f | deep-f force-idle deep
  inactive force-inactive
  stop | 1 unforce
  light? | light ? get light
  deep? | deep ? get deep
  light+ | light + enabled light
  all+ | all + enable all
  deep+ | deep + enable deep
  light- | light - disable light
  deep- | deep - disable deep
  all- | all - disable all
  whitelist | wl whitelist
  +com.example.app whitelist +com.example.app
  -com.example.app whitelist -com.example.app
  +: except-idle-whitelist +com.example.app
  =: except-idle-whitelist =com.example.app
  r: except-idle-whitelist reset
  t:? tempwhitelist
  t:1000:+ tempwhitelist -d 1000 com.example.app
  t:+ tempwhitelist -r com.example.app
  motion
  qz 0 force-modemanager-quickdoze true
  qz 1 force-modemanager-quickdoze false
  ob 0 force-modemanager-offbody true
  ob 1 force-modemanager-offbody false

  case $1 in
  light* | deep*)
    if [[ $2 == -f ]]; then
      force-idle $1
    elif [[ $2 == ? ]] || [[ $1 =~ ^(light|deep)\? ]]; then
      get $1
    elif [[ $2 == + ]] || [[ $1 =~ ^(light|deep)\+ ]]; then
      enable $1
    elif [[ $2 == - ]] || [[ $1 =~ ^(light|deep)\- ]]; then
      disable $1
    fi
    ;;
  all*)
    if [[ $2 == + ]] || [[ $1 == 'all+' ]]; then
      enable all
    elif [[ $2 == - ]] || [[ $1 == 'all-' ]]; then
      disable all
    fi
    ;;
  qz)
    if [[ $2 == 0 ]]; then
      force-modemanager-quickdoze true
    elif [[ $2 == 1 ]]; then
      force-modemanager-quickdoze false
    fi
    ;;
  ob)
    if [[ $2 == 0 ]]; then
      force-modemanager-offbody true
    elif [[ $2 == 1 ]]; then
      force-modemanager-offbody false
    fi
    ;;
  whitelist | wl)
    whitelist
    ;;
  +*) ;;
  -*) ;;
  esac

}

_text_format() {
  local w="${*//\"/\\\"}"
  w="${w//\$/\\\$}"
  w="${w//\&/\\\&}"
  echo "$w"
}

_cmdStartOnMIMEType() {
  [[ "$1" == '' ]] && return 1
  local _cmd="$1" _arr=
  shift
  _arr="$*"
  _arr=$(_text_format "$_arr")
  bash -c "${_cmd//\$\#1\#\$/$_arr}"
}


_help() {
  case $1 in
  install)
    cat <<@
    --install-g | in )
    --install-gplay | in-g )
    --install-coolapk | in-c )
    --install-existing | in-ex )
@
    ;;
  uninstall)
    cat <<@
      --uninstall | unin | uni )
      --uninstall-k | unin-k | uni-k | unik | uk )
@
    ;;
  esac
}

_permissionctl() {
  local _oper_type=$1 \
    _permission_type=$2 \
    _package_name=$3 \
    _user=$4 \
    _permission_mode_list=$5 \
    _permission_mode=$6

  case $_oper_type in
  -h | --help)
    cat <<@help
  -h | --help
  get
  get-all
  set [allow|deny|ignore|default]
  reset
@help
    ;;
  get)
    rish <<@rish
        appops get --user $_user $_package_name $_permission_type ;
        dumpsys package $_package_name |grep "$_permission_type"
@rish
    ;;
  get-all | get?)
    rish -c "appops get --user $_user $_package_name"
    ;;
  set)
    _manageAppopsPermissions $_permission_type $_package_name "$_permission_mode_list" $_permission_mode $_user
    ;;
  set?)
    _manageAppopsPermissions $_permission_type $_package_name "$_permission_mode_list" $_permission_mode $_user
    rish -c "appops get --user $_user $_package_name $_permission_type "
    ;;
  reset)
    rish -c "appops reset --user $_user $_package_name"
    ;;
  *)
    echo :am start -a $5 -d package:$package_name
    am start -a $5 -d package:$package_name
    ;;
  esac
}
_manageAppopsPermissions() {
  local _permission_type=$1 \
    _package_name=$2 \
    _permission_mode_list=$3 \
    _permission_mode=$4 \
    _user=$5
  [[ $_permission_mode =~ ^($_permission_mode_list)$ ]] || {
    echo :permission mode \"$_permission_mode\" not in [$_permission_mode_list] list.
    return
  }
  rish -c "appops set --user $_user $_package_name $_permission_type $_permission_mode"
  case $_permission_mode in
  allow)
    succ -- allow $_permission_type $_permission_mode $?
    ;;
  deny)
    err -- deny $_permission_type $_permission_mode $?
    ;;
  ignore)
    singal -- ignore $_permission_type $_permission_mode $?
    ;;
  default)
    singal -- default $_permission_type $_permission_mode $?
    ;;
  esac

}
_managePermissions() {
  : 待实现
}




isBlank() {
  [[ -z "$1" || "$1" =~ ^[[:space:]]*$ ]]
}

isUserId() {
  [[ "$1" =~ ^[0-9]+$ && "$1" -ge 0 && "$1" -le 999 ]]
}

isHelpOpt() {
  [[ "$1" == '-h' || "$1" == '--help' ]]
}

rishCmdP() {
  printf "%s " rish -c "$1" -\>
  rish -c "$1"
}



## main ##

[[ $# -le 0 ]] && exit # 或者打印帮助文档

[ -t 0 ] || stdin_data="$(cat)"
if [[ $1 == '-' ]]; then # 当$1为-时,
  shift
  _ext_data=$@
  is_while=-1
else

  IFS=/ read -t 1 -rsa _def_arr <<<"$1"
  shift

  : packageName/2className/3action/4userId/5key:otherClassName:suffix::.../6Language-Region:appName/7permission:[@perArr]:...

  isBlank ${_def_arr[0]} || package_name="${_def_arr[0]}"
  isBlank ${_def_arr[1]} || activity_name="${_def_arr[1]}"
  isBlank ${_def_arr[2]} || action="${_def_arr[2]}"
  isUserId ${_def_arr[3]} && user_id=${_def_arr[3]}

  if ! isBlank $package_name && ! isBlank $activity_name; then
    component_name=$package_name/$activity_name
    #!rm echo $component_name
  fi

fi

isUserId $1 && user_id=$1 && shift
isUserId $user_id || user_id=0

[[ $is_while == 0 ]] && while [[ $# -gt 0 ]]; do
  case "$1" in
  [0-9] | [0-9][0-9] | [0-9][0-9][0-9])
    user_id=$1
    echo _user="--user $1" #!rm
    ;;
  --search | s-g)
    chrome-android g:package:\"$package_name\"
    is_return=0
    ;;
  --install | in)
    [[ "$2" == '-h' || "$2" == '--help' ]] && _help install && return
    apk_install -- $package_name $user
    is_return=0
    ;;
  --install-g | in)
    rish -c "pm install -p $package_name"
    is_return=0
    ;;
  --install-gplay | in-g)
    apk_install gplay $package_name $user
    is_return=0
    ;;
  --install-coolapk | in-c)
    apk_install coolapk $package_name $user
    is_return=0
    ;;
  --install-aurora | in-a)
    apk_install aurora $package_name $user
    is_return=0
    ;;
  --install-fdroid | in-f)
    apk_install fdroid $package_name $user
    is_return=0
    ;;
  --install-existing | in-ex)
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rishCmdP "pm install-existing --user $user_id $package_name"
    is_return=0
    ;;
  --uninstall | unin | uni)
    isHelpOpt "$2" && _help uninstall && return
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rishCmdP "pm uninstall --user $user_id $package_name"
    is_return=0
    ;;
  --uninstall-k | unin-k | uni-k | unik | uk)
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rishCmdP "pm uninstall -k --user $user_id $package_name"
    is_return=0
    ;;
  --clear | clear | c | cf)
    _isClear=y
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    if [[ $1 == c ]]; then
      unset _isClear
      read -n1 -t10 -p "Clear data for $package_name? [n/y]: " _isClear
      echo # 换行兼容性
    fi
    [[ "$_isClear" == y ]] && rishCmdP "pm clear --user $user_id $package_name"
    is_return=0
    ;;
  --path | path | p)
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rish -c "pm path --user $user_id $package_name"
    is_return=0
    ;;
  --dump | dump)
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rish -c "pm dump --user $user_id $package_name"
    is_return=0
    ;;
  --disable | dis)
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rishCmdP "pm disable-user --user $user_id $package_name"
    is_return=0
    ;;
  --enable | en | e)
    [[ $# -eq 2 ]] && isUserId $2 && user_id=$2 && shift
    rishCmdP "pm enable --user $user_id $package_name"
    is_return=0
    ;;
  --package-name | cat)
    echo $package_name
    is_return=0
    ;;
  --component-name | cat-all)
    echo "$component_name"
    is_return=0
    ;;
  --info | info)
    echo "-d package:$package_name" | apm com.android.settings/com.android.settings.applications.InstalledAppDetails/android.settings.APPLICATION_DETAILS_SETTINGS/$user_id #&>/dev/null
    is_return=0
    ;;
  --info-mi | info-mi)
    echo "-e package_name $package_name" | apm com.miui.securitycenter/com.miui.appmanager.ApplicationsDetailsActivity/miui.intent.action.APP_MANAGER_APPLICATION_DETAIL/$user_id #&>/dev/null
    is_return=0
    ;;
  --mem | mem)
    rish -c "dumpsys meminfo $package_name"
    return
    ;;
  --app-name | --name | appname | name | n)
    [[ $2 =~ ^[a-z]{2}-[A-Z]{2}$ ]] && lang=$2 ||
      lang=$(getSysLocale)
    #lang=$(getprop persist.sys.locale)
    is_return=0
    ;;

  --powerkeeper | pk)
    am start -n com.miui.powerkeeper/.ui.HiddenAppsConfigActivity -a android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS -d package:$package_name
    is_return=0
    ;;
  --battery-whitelist-add | bw+)
    battery_whitelist + $package_name
    is_return=0
    ;;
  --battery-whitelist-remove | bw-)
    battery_whitelist - $package_name
    is_return=0
    ;;
  --battery-whitelist-get | 'bw?')
    battery_whitelist get $package_name
    is_return=0
    ;;
  --battery-whitelist-list | 'bwl' | 'bw=?')
    battery_whitelist list
    is_return=0
    ;;
  --battery-whitelist-help | bw)
    battery_whitelist help
    is_return=0
    ;;

  --accessibility-services-get | as)
    rish -c "settings get secure enabled_accessibility_services"
    is_return=0
    ;;
  --accessibility-services-add | as+)
    echo rish -c "settings put secure enabled_accessibility_services $package_name/${classForKey[ACCESSIBILITY_SERVICES]}"
    rish -c "settings put secure enabled_accessibility_services $package_name/${classForKey[ACCESSIBILITY_SERVICES]}"
    is_return=0
    ;;
  --accessibility-services-remove | as-)
    _ASL=$(rish -c "settings get secure enabled_accessibility_services" | awk -v as="$package_name" '{
        split($1, arr, ":");
        for(i=1; i<=length(arr); i++){
          if(index(arr[i],as)) next;
          printf "%s%s", arr[i], (i<(length(arr)-1) ? ":" : "")
        }
        }')
    #echo rish -c "settings put secure enabled_accessibility_services $_ASL"
    rish -c "settings put secure enabled_accessibility_services $_ASL"
    is_return=0
    ;;

  --grant | grant)
    [[ "$2" =~ ^- ]] && case $2 in
    -a) ;;
    -all)
      set -- - --grant-all ${@:3}
      continue
      ;;
    esac
    rish -c "$(printf "$all_permission" | tr ':' '\n' | printPermissions $package_name grant)"
    is_return=0
    ;;
  --grant-all | grant-all)
    grantPermissions $package_name
    return
    is_return=0
    ;;
  --revoke-all | revoke-all)
    revokePermissions $package_name
    is_return=0
    ;;
  --print-all | grant-all)
    printPermissions $package_name
    is_return=0
    ;;


  --jit | jit | jit-f)
    local _is_jit=y
    [[ $1 == jit ]] && read -p "Is JIT running in speed-profile mode? [y/N]" -n 1 _is_jit
    [[ $_is_jit == y ]] && printf '\r' &&
      rishCmdP "cmd package compile -m speed-profile -f $package_name"
    is_return=0
    ;;
  --jit-all | jit-all | jit-all-f)
    local _is_jit=y
    [[ $1 == jit-all ]] && read -p "Is JIT running in speed mode? [y/N]" -n 1 _is_jit
    [[ $_is_jit == y ]] && printf '\r' &&
      rishCmdP "cmd package compile -m speed -f $package_name"
    is_return=0
    ;;
  --jit-reset | jit-reset | jit0)
    local _is_jit=y
    [[ $1 == jit ]] && read -p "Is JIT running in clear-app-preset mode? [y/N]" -n 1 _is_jit
    [[ $_is_jit == y ]] && printf '\r' &&
      rishCmdP "pm art clear-app-preset $package_name"
    is_return=0
    ;;
  --jit-reset-all | jit-reset-all | jit0a)
    local _is_jit=y
    [[ $1 == jit ]] && read -p "Is JIT running in reset mode? [y/N]" -n 1 _is_jit
    [[ $_is_jit == y ]] && printf '\r' &&
      rishCmdP "pm compile --reset $package_name"
    is_return=0
    ;;

  --jit-info | jit-info | jit?)
    rish -c "pm dump $package_name" | awk '
        /Dexopt state:/ { flag=1; next }
        flag && /^[[:space:]]*$/ { exit }  # 遇到空行退出
        flag { print }
      '
    is_return=0
    ;;

  --links)
    : <<@
    --links0 )  # 启用

@
    local __links_hint="\033[32mlinks\033[0m"
    printf "%b" "[$__links_hint] "
    while read _links_opt; do case $_links_opt in
      q)
        break
        ;;
      h | ?) ;;
      esac done
    echo q
    is_return=0
    ;;
  --links0)
    rishCmdP "pm set-app-links-allowed --user $user_id --package $package_name true"
    is_return=0
    ;;
  --links0-all)
    rishCmdP "pm set-app-links-allowed --user $user_id --package all true"
    is_return=0
    ;;
  --links0:*)
    local _links
    IFS=: read -t 1 -rsa _links <<<"$1"
    echo rishCmdP "pm set-app-links-user-selection --user $user_id --package $package_name true ${_links[@]:1}"
    is_return=0
    ;;
  --links1)
    rishCmdP "pm set-app-links-allowed --user $user_id --package $package_name false"
    is_return=0
    ;;
  --links1-all)
    rishCmdP "pm set-app-links-allowed --user $user_id --package all false"
    is_return=0
    ;;
  --links-1)
    rishCmdP "pm reset-app-links --user $user_id $package_name"
    is_return=0
    ;;
  --links?)
    rish -c "pm get-app-links $package_name"
    is_return=0
    ;;

  --help)
    echo "help"
    is_return=0
    ;;
  -h | --hint)
    _hint=$2
    shift
    ;;
  -ch | --cat-hint)
    echo $_hint
    ;;
  -9 | --kill | --stop)
    rish -c "am force-stop $package_name"
    is_return=0
    ;;
  :)
    _cmdStartOnMIMEType "${__mime_text_x_clipboard[$package_name]}" "$(termux-clipboard-get)"
    return
    ;;
  --)
    _ext="$_ext ${@:2}"
    break
    ;;
  magnet:?xt=urn:btih*)
    echo "Open link 🔗 $1"
    #if [[ "$magnet_link" =~ ^magnet:\?xt=urn:btih:[0-9a-fA-F]{40}.*$ ]]; then
    _cmdStartOnMIMEType "${__mime_application_x_magnet[$package_name]}" "$*" || _cmdStartOnMIMEType "${__mime_text_plain[$package_name]}" "$*"
    is_return=0
    break
    ;;
  http://* | https://*)
    echo http
    #if [[ "$url" =~ ^https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}(?:\/[^ ]*)?$ ]]; then
    is_return=0
    break
    ;;
  *)

    echo $1
    #if [ -n "${__PERMISSIONS_MAP[$1]}" ] ;then
    #  eval ${__PERMISSIONS_MAP[$1]}
    #  is_return=0 ; break
    #elif [[ "$package_name_all" == / ]] ;then
    #  _ext=$_ext" "$*
    #  echo $_ext
    #  shift
    #else
    #  _cmdStartOnMIMEType "${__mime_text_plain[$package_name]}" "$*"
    is_return=0
    #fi
    ;;
  esac
  shift && continue
done

(( ${is_return:-1} <= 0 )) && exit

[[ $user_id == 0 ]] && _sh=bash || _sh=rish
[[ -z "$action" ]] || action="-a $action"
[[ -z $component_name ]] || component_name="-n $component_name"

$_sh -c "am start --user $user_id $action $component_name $stdin_data $_ext_data"

# vim: set ft=sh ts=2 sw=2 sts=2 et :
